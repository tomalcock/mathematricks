generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  Description   String
  Image_url     String          @map("Image-url")
  Lessons       String[]
  Topic         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MyCoursesItem MyCoursesItem[]

  @@map("Courses")
}

model MyCourses {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  courses   MyCoursesItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?         @db.ObjectId

  @@map("mycourses")
}

model MyCoursesItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String    @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quantity    Int
  myCoursesId String    @db.ObjectId
  myCourses   MyCourses @relation(fields: [myCoursesId], references: [id], onDelete: Cascade)

  @@map("mycoursesitem")
}

model Account {
  id                 String    @id @default(cuid()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?   @db.String
  accessToken        String?   @db.String
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String      @id @default(cuid()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  MyCourses     MyCourses[]

  @@map("user")
}

model VerificationRequest {
  id         String   @id @default(cuid()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verificationrequests")
}
