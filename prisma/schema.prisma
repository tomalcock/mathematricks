generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  Description   String
  Image_url     String          @map("Image-url")
  Lessons       String[]
  Topic         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MyCoursesItem MyCoursesItem[]

  @@map("Courses")
}

model MyCourses {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  courses   MyCoursesItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?         @db.String

  @@map("mycourses")
}

model MyCoursesItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String    @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quantity    Int
  myCoursesId String    @db.ObjectId
  myCourses   MyCourses @relation(fields: [myCoursesId], references: [id], onDelete: Cascade)

  @@map("mycoursesitem")
}

model Account {
  id                String   @id @default(cuid()) @map("_id") @db.String
  userId            String   @db.String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid()) @map("_id") @db.String
  userId       String   @db.String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String      @id @default(cuid()) @map("_id") @db.String
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  MyCourses     MyCourses[]

  @@map("user")
}

model VerificationRequest {
  id         String   @id @default(cuid()) @map("_id") @db.String
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verificationrequests")
}
